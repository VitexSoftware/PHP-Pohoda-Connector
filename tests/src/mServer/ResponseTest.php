<?php

declare(strict_types=1);

/**
 * This file is part of the PHP-Pohoda-Connector package
 *
 * https://github.com/VitexSoftware/PHP-Pohoda-Connector
 *
 * (c) VitexSoftware. <https://vitexsoftware.com/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\mServer;

use mServer\Response;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2021-01-01 at 21:47:42.
 */
class ResponseTest extends \PHPUnit\Framework\TestCase
{
    protected Response $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $client = new \mServer\Client();
        // Provide minimal valid XML for Response parsing
        $client->lastCurlResponse = '<?xml version="1.0"?><responsePack></responsePack>';
        $this->object = new Response($client);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \mServer\Response::useCaller
     */
    public function testUseCaller(): void
    {
        $client = new \mServer\Client();
        $client->lastCurlResponse = '<?xml version="1.0" encoding="windows-1250"?><responsePack></responsePack>';
        $response = new Response($client);
        $this->assertInstanceOf(Response::class, $response);
    }

    /**
     * @covers \mServer\Response::processResponsePack
     */
    public function testProcessResponsePack(): void
    {
        $responsePackData = ['@state' => 'ok', '@note' => 'All good'];
        $this->object->processResponsePack($responsePackData);
        $this->assertEquals('ok', $this->object->getState());
        $this->assertIsString($this->object->getNote());
    }

    /**
     * @covers \mServer\Response::processResponsePackItem
     */
    public function testProcessResponsePackItem(): void
    {
        $item = ['@state' => 'ok', '@note' => 'Note'];
        $this->object->processResponsePackItem($item);
        $this->assertEquals('ok', $this->object->getState());
    }

    /**
     * @covers \mServer\Response::processProducedDetails
     */
    public function testProcessProducedDetails(): void
    {
        $details = ['rdc:state' => 'ok', 'rdc:detail' => 'detail'];
        $this->object->processProducedDetails($details);
        $this->assertIsArray($this->object->producedDetails);
    }

    /**
     * @covers \mServer\Response::processImportDetails
     */
    public function testProcessImportDetails(): void
    {
        $details = ['rdc:detail' => ['rdc:state' => 'error', 'msg' => 'fail']];
        $this->object->processImportDetails($details);
        $this->assertEquals('error', $this->object->getState());
    }

    /**
     * @covers \mServer\Response::processResponseData
     */
    public function testProcessResponseData(): void
    {
        $data = ['lAdb:addressbook' => [['addressbookHeader' => ['id' => 1]]]];
        $this->object->processResponseData($data);
        $this->assertIsArray($this->object->getAgendaData('addressbook'));
    }

    /**
     * @covers \mServer\Response::typesToArray
     */
    public function testTypesToArray(): void
    {
        $source = [['rdc:state' => 'ok'], ['rdc:state' => 'error']];
        $result = Response::typesToArray($source);
        $this->assertIsArray($result);
        $this->assertEquals('ok', $result[0]['state']);
        $this->assertEquals('error', $result[1]['state']);
    }

    /**
     * @covers \mServer\Response::typeToArray
     */
    public function testTypeToArray(): void
    {
        $type = ['rdc:state' => 'ok', 'rdc:detail' => 'foo'];
        $result = Response::typeToArray($type);
        $this->assertIsArray($result);
        $this->assertEquals('ok', $result['state']);
        $this->assertEquals('foo', $result['detail']);
    }

    /**
     * @covers \mServer\Response::prepareElement
     */
    public function testPrepareElement(): void
    {
        $elementData = ['name' => 'foo', 'value' => [['bar']]];
        $result = Response::prepareElement($elementData);
        $this->assertIsArray($result);
        $this->assertArrayHasKey('foo', $result);
    }

    /**
     * @covers \mServer\Response::getNote
     */
    public function testGetNote(): void
    {
        $note = $this->object->getNote();
        $this->assertIsString($note);
    }

    /**
     * @covers \mServer\Response::isOk
     */
    public function testIsOk(): void
    {
        $this->assertIsBool($this->object->isOk());
    }

    /**
     * @covers \mServer\Response::getState
     */
    public function testGetState(): void
    {
        $state = $this->object->getState();
        $this->assertIsString($state);
    }

    /**
     * @covers \mServer\Response::xmlToArray
     */
    public function testXmlToArray(): void
    {
        $xml = simplexml_load_string('<?xml version="1.0"?><root><child>value</child></root>');
        $result = Response::xmlToArray($xml);
        $this->assertIsArray($result);
        $this->assertArrayHasKey('root', $result);
    }

    /**
     * @covers \mServer\Response::anyXmlToArray
     */
    public function testAnyXmlToArrayImplemented(): void
    {
        $xml = '<?xml version="1.0"?><root><child>value</child></root>';
        $result = $this->object->anyXmlToArray($xml);
        $this->assertIsArray($result);
        $this->assertArrayHasKey('root', $result);
    }

    /**
     * @covers \mServer\Response::parse
     */
    public function testParseImplemented(): void
    {
        $xml = '<?xml version="1.0"?><root><child>value</child></root>';
        $result = Response::parse($xml, []);
        $this->assertIsArray($result);
        $this->assertArrayHasKey('root', $result);
    }

    /**
     * @covers \mServer\Response::processBank
     */
    public function testprocessBank(): void
    {
        $this->markTestIncomplete('This test has not been implemented yet.');
    }
}
