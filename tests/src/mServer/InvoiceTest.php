<?php

declare(strict_types=1);

/**
 * This file is part of the PHP-Pohoda-Connector package
 *
 * https://github.com/VitexSoftware/PHP-Pohoda-Connector
 *
 * (c) VitexSoftware. <https://vitexsoftware.com/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\mServer;

use mServer\Invoice;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2021-01-01 at 21:47:41.
 *
 * @no-named-arguments
 */
class InvoiceTest extends \PHPUnit\Framework\TestCase
{
    protected Invoice $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Invoice();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \mServer\Invoice::create
     */
    public function testCreate(): void
    {
        $result = $this->object->create([]); // Pass empty array as dummy data
        $this->assertIsInt($result, 'create() should return an integer');
    }

    /**
     * @covers \mServer\Invoice::addItem
     */
    public function testAddItem(): void
    {
        $this->object->create([]); // Ensure requestXml is initialized
        $item = [
            'text' => 'Test Item',
            'quantity' => 1,
            'unit' => 'ks',
            'homeCurrency' => ['unitPrice' => 100],
        ];
        $result = $this->object->addItem($item);
        $this->assertNotFalse($result, 'addItem() should not return false for a valid item');
    }

    /**
     * @covers \mServer\Invoice::extId
     */
    public function testExtId(): void
    {
        $result = $this->object->extId('test-id');
        $this->assertNotEmpty($result, 'extId() should return a non-empty value');
    }
}
