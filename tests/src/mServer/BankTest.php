<?php

declare(strict_types=1);

/**
 * This file is part of the PHP-Pohoda-Connector package
 *
 * https://github.com/VitexSoftware/PHP-Pohoda-Connector
 *
 * (c) VitexSoftware. <https://vitexsoftware.com/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\mServer;

use mServer\Bank;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2025-05-12 at 09:10:57.
 */
class BankTest extends \PHPUnit\Framework\TestCase
{
    protected Bank $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Bank();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \mServer\Bank::create
     */
    public function testCreate(): void
    {
        $result = $this->object->create([]); // Pass empty array as dummy data
        $this->assertIsInt($result, 'create() should return an integer');
    }

    /**
     * @covers \mServer\Bank::takeData
     */
    public function testTakeData(): void
    {
        // Use only valid keys for Bank agenda
        $data = ['account' => '123456789', 'dateStatement' => '2025-06-03'];
        $this->object->takeData($data);
        $this->assertEquals($data, $this->object->getData(), 'takeData() should set data correctly');
    }

    /**
     * @covers \mServer\Bank::setObjectName
     */
    public function testSetObjectName(): void
    {
        $this->object->setObjectName('BankTest');
        // No getObjectName(), so just check no exception thrown
        $this->assertTrue(true);
    }

    /**
     * @covers \mServer\Bank::addSummary
     */
    public function testAddSummary(): void
    {
        $this->markTestSkipped('addSummary() requires a valid document context and cannot be tested in isolation.');
    }

    /**
     * @covers \mServer\Bank::getFromPohoda
     */
    public function testGetFromPohoda(): void
    {
        $result = $this->object->getFromPohoda([]); // Pass empty array as dummy filter
        $this->assertIsArray($result, 'getFromPohoda() should return an array');
    }

    /**
     * @covers \mServer\Bank::populate
     */
    public function testPopulate(): void
    {
        $data = ['field' => 'value'];
        $this->object->populate($data);
        $this->assertEquals($data, $this->object->getData(), 'populate() should set data correctly');
    }
}
