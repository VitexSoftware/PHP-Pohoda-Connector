<?php

/**
 * PHPmPohoda - Client Class
 *
 * @author     Vítězslav Dvořák <info@vitexsoftware.cz>
 * @copyright  (C) 2020 Vitex Software
 */

namespace mServer;

use Ease\Atom;
use Ease\Functions;
use Ease\Molecule;
use Lightools\Xml\XmlException;
use Lightools\Xml\XmlLoader;
use Riesenia\Pohoda;

/**
 * Stormware's Pohoda mServer's client class.
 *
 * @author Vítězslav Dvořák <info@vitexsoftware.cz>
 */
class Client extends \Ease\Sand {

    /**
     * Version of mServer library
     *
     * @var string
     */
    public static $libVersion = '0.1';

    /**
     * Curl Handle.
     *
     * @var resource
     */
    private $curl = null;

    /**
     * We Connect to server by default
     * @var boolean
     */
    public $offline = false;

    /**
     * Override cURL timeout
     * @var int seconds
     */
    public $timeout = null;

    /**
     * Body data  for next curl POST operation
     *
     * @var string
     */
    public $postFields = null;

    /**
     * Enable Curl Compress ?
     * @var boolan
     */
    public $compress = true;

    /**
     * Raw Content of last curl response
     *
     * @var string
     */
    public $lastCurlResponse;

    /**
     * HTTP Response code of last request
     *
     * @var int
     */
    public $lastResponseCode = null;

    /**
     * Informace o poslední HTTP chybě.
     *
     * @var string
     */
    public $lastCurlError = null;

    /**
     * Informace o posledním HTTP requestu.
     *
     * @var *
     */
    public $curlInfo;

    /**
     * @var array of Http headers attached with every request
     */
    public $defaultHttpHeaders = [
        'STW-Application' => 'PHPmServer',
        'Accept' => 'application/xml',
        'Content-Type' => 'application/xml'
    ];

    /**
     * [protocol://]Server[:port]
     * @var string
     */
    public $url = null;

    /**
     * REST API Username
     * @var string
     */
    public $user = null;

    /**
     * REST API Password
     * @var string
     */
    public $password = null;

    /**
     * My Company identification ID
     * @var string
     */
    protected $ico = null;

    /**
     * XML Processor
     * @var Pohoda
     */
    protected $pohoda;

    /**
     * 
     *
     * @param mixed $init default record id or initial data. See processInit()
     * @param array $options Connection settings and other options override
     */
    public function __construct($init = null, $options = []) {
        $this->setUp($options);
        $this->curlInit();
        $this->pohoda = new Pohoda($this->ico);
        $this->pohoda->setApplicationName(Functions::cfg('APP_NAME') ? Functions::cfg('APP_NAME') : 'PHPmPohoda');
        $tmpFile = sys_get_temp_dir() . '/' . Functions::randomString() . '.xml';
        $this->pohoda->open($this->debug ? $tmpFile : null, microtime(), 'generated by PHPmPohoda');
        if (!empty($init)) {
            $this->processInit($init);
        }
    }

    public function processInit($init) {
        
    }

    /**
     * Add Info about used user, server and libraries
     *
     * @param string $prefix banner prefix text
     * @param string $suffix banner suffix text
     */
    public function logBanner($prefix = null, $suffix = null) {
        parent::logBanner($prefix,
                'mServer ' . str_replace('://', '://' . $this->user . '@' . $this->url) . ' PHPmServer v' . self::$libVersion . ' ease-core v' . Atom::$frameworkVersion . ' ' .
                $suffix
        );
    }

    /**
     * SetUp Object to be ready for work
     *
     * @param array $options Object Options ( user,password,authSessionId
     *                                        company,url,agenda,
     *                                        prefix,defaultUrlParams,debug,
     *                                        detail,offline,filter,ignore404
     *                                        timeout,companyUrl,ver,throwException
     */
    public function setUp($options = []) {
        $this->setupProperty($options, 'ico', 'POHODA_ICO');
        $this->setupProperty($options, 'url', 'POHODA_URL');
        $this->setupProperty($options, 'user', 'POHODA_USERNAME');
        $this->setupProperty($options, 'password', 'POHODA_PASSWORD');
        $this->setupProperty($options, 'timeout', 'POHODA_TIMEOUT');
        $this->setupProperty($options, 'compress', 'POHODA_COMPRESS');

        if (isset($options['agenda'])) {
            $this->setEvidence($options['agenda']);
        }
        $this->setupProperty($options, 'debug');
    }

    /**
     * Set Authentification
     * 
     * @return boolean
     */
    public function setAuth() {
        $this->defaultHttpHeaders['STW-Authorization'] = 'Basic ' . base64_encode($this->user . ':' . $this->password);
        return strlen($this->user) && strlen($this->password);
    }

    /**
     * Inicializace CURL
     *
     * @return boolean Online Status
     */
    public function curlInit() {
        if ($this->offline === false) {
            $this->curl = \curl_init(); // create curl resource
            \curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true); // return content as a string from curl_exec
            \curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, true); // follow redirects (compatibility for future changes in FlexiBee)
            \curl_setopt($this->curl, CURLOPT_HTTPAUTH, true);       // HTTP authentication
            \curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false); // FlexiBee by default uses Self-Signed certificates
            \curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);
            \curl_setopt($this->curl, CURLOPT_VERBOSE, ($this->debug === true)); // For debugging
            if (!is_null($this->timeout)) {
                \curl_setopt($this->curl, CURLOPT_TIMEOUT, $this->timeout);
            }
            if ($this->compress === true) {
                \curl_setopt($this->curl, CURLOPT_ENCODING, "gzip");
            }
            \curl_setopt($this->curl, CURLOPT_USERAGENT, 'mServerPHP  v' . self::$libVersion . ' https://github.com/VitexSoftware/PHPmServer');
        }
        return !$this->offline && $this->setAuth();
    }

    /**
     * Prepare data to send 
     *
     * @param string $data
     */
    public function setPostFields($data) {
        $this->postFields = $data;
    }

    /**
     * Perform HTTP request
     *
     * @param string $url    Request URL
     * @param string $method HTTP Method GET|POST
     * 
     * @return int HTTP Response CODE
     */
    public function doCurlRequest($url, $method, $format = null) {
        curl_setopt($this->curl, CURLOPT_URL, $url);
        curl_setopt($this->curl, CURLOPT_CUSTOMREQUEST, strtoupper($method));
        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $this->postFields);
        $httpHeaders = $this->defaultHttpHeaders;
        array_walk($httpHeaders, function (&$value, $header) {
            $value = $header . ': ' . $value;
        });
        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $httpHeaders);

        $this->lastCurlResponse = curl_exec($this->curl);
        $this->curlInfo = curl_getinfo($this->curl);
        $this->curlInfo['when'] = microtime();
        $this->lastResponseCode = $this->curlInfo['http_code'];
        $this->lastCurlError = curl_error($this->curl);
        if (strlen($this->lastCurlError)) {
            $this->addStatusMessage(sprintf('Curl Error (HTTP %d): %s',
                            $this->lastResponseCode, $this->lastCurlError), 'error');
        }
        return $this->lastResponseCode;
    }

    /**
     * Funkce, která provede I/O operaci a vyhodnotí výsledek.
     *
     * @param string $urlSuffix část URL za identifikátorem firmy.
     * @param string $method    HTTP/REST metoda

     * 
     * @return int HTTP Status code
     */
    public function performRequest($urlSuffix = null, $method = 'GET') {
        $this->responseStats = [];
        $this->errors = [];

        if (preg_match('/^http/', $urlSuffix)) {
            $url = $urlSuffix;
        } elseif (strlen($urlSuffix) && ($urlSuffix[0] == '/')) {
            $url = $this->url . $urlSuffix;
        }

        return $this->processResponse($this->doCurlRequest($url, $method));
    }

    public function processResponse($httpCode) {
        $loader = new XmlLoader();
        $response = [];
        $xmlDomDocument = $loader->loadXml($this->lastCurlResponse);
        $p = $xmlDomDocument->getElementsByTagName('responsePackItem')->item(0);
        if ($p->hasAttributes()) {
            foreach ($p->attributes as $attr) {
                $response[$attr->nodeName] = trim($attr->nodeValue);
            }
        }
        $responseNoteLines = explode(PHP_EOL, $response['note']);
        $this->addStatusMessage(end($responseNoteLines), $response['state']);
        return $response;
    }

    /**
     * Check mServer availbilty
     * 
     * @return boolean
     */
    public function getStatus() {
        $this->performRequest('/status');
        return ($this->lastResponseCode == 200) && $this->lastCurlResponse == 'Response from POHODA mServer';
    }

    /**
     * Reconnect After unserialization
     */
    public function __wakeup() {
        $this->curlInit();
    }

}
